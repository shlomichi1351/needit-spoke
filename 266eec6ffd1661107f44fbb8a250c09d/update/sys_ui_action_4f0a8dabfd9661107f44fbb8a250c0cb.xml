<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_ui_action">
    <sys_ui_action action="INSERT_OR_UPDATE">
        <action_name/>
        <active>false</active>
        <client>false</client>
        <client_script_v2><![CDATA[function onClick(g_form) {

}]]></client_script_v2>
        <comments/>
        <condition>current.due_date &lt; new GlideDate()</condition>
        <form_action>true</form_action>
        <form_button>false</form_button>
        <form_button_v2>false</form_button_v2>
        <form_context_menu>false</form_context_menu>
        <form_link>true</form_link>
        <form_menu_button_v2>false</form_menu_button_v2>
        <form_style/>
        <format_for_configurable_workspace>false</format_for_configurable_workspace>
        <hint>Closes overdue NeedIt Task and creates follow-up task to investigate</hint>
        <isolate_script>false</isolate_script>
        <list_action>false</list_action>
        <list_banner_button>false</list_banner_button>
        <list_button>false</list_button>
        <list_choice>false</list_choice>
        <list_context_menu>false</list_context_menu>
        <list_link>false</list_link>
        <list_save_with_form_button>false</list_save_with_form_button>
        <list_style/>
        <messages/>
        <name>Close Overdue NeedIt Task</name>
        <onclick/>
        <order>150</order>
        <script><![CDATA[(function() {

    try {
        var inputs = {};
        inputs['needit_task'] = current; // GlideRecord of table: x_58872_needit_needit_task 
        inputs['reason'] = "overdue task closed manually."; // String 

        // Start Asynchronously: Uncomment to run in background. Code snippet will not have access to outputs.
        // sn_fd.FlowAPI.getRunner().subflow('x_snc_needit_spoke.handle_overdue_needit_tasks').inBackground().withInputs(inputs).run();

        // Execute Synchronously: Run in foreground. Code snippet has access to outputs.
        var result = sn_fd.FlowAPI.getRunner().subflow('x_snc_needit_spoke.handle_overdue_needit_tasks').inForeground().withInputs(inputs).run();
        var outputs = result.getOutputs();

        // Get Outputs:
        // Note: outputs can only be retrieved when executing synchronously.
        var follow_up_task = outputs['follow_up_task']; // Reference
        action.setRedirectURL(followup_task);
		action.setReturnURL(current); 
    } catch (ex) {
        var message = ex.getMessage();
        gs.error(message);
    }

})();]]></script>
        <show_insert>false</show_insert>
        <show_multiple_update>false</show_multiple_update>
        <show_query>false</show_query>
        <show_update>true</show_update>
        <sys_class_name>sys_ui_action</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-04-25 10:54:19</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>4f0a8dabfd9661107f44fbb8a250c0cb</sys_id>
        <sys_name>Close Overdue NeedIt Task</sys_name>
        <sys_overrides/>
        <sys_package display_value="NeedIt Spoke" source="x_snc_needit_spoke">266eec6ffd1661107f44fbb8a250c09d</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt Spoke">266eec6ffd1661107f44fbb8a250c09d</sys_scope>
        <sys_update_name>sys_ui_action_4f0a8dabfd9661107f44fbb8a250c0cb</sys_update_name>
        <table/>
        <ui11_compatible>true</ui11_compatible>
        <ui16_compatible>false</ui16_compatible>
    </sys_ui_action>
</record_update>
